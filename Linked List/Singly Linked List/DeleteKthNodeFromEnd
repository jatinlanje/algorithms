class Solution { //two pass
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(findLength(head)==0 || findLength(head)==1){
            return null;
        }
        if(findLength(head)==n){
            return head.next=head.next;
        }
        if(n<findLength(head)){
            int k=findLength(head)-n;
            ListNode current=head;
            int count=0;
            while(count<k-1){
                current=current.next;
                count++;
            }
            current.next=current.next.next;
        }
        return head; 
    }
    public int findLength(ListNode head){
        int length=0;
        ListNode current=head;
        while(current!=null){
            length++;
            current=current.next;
        }
        return length;
    }
}

class Solution { //one pass
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode start = new ListNode(-1);
        start.next = head;
        ListNode fast = start;
        ListNode slow = start;     

        for(int i = 1; i <= n; ++i)
            fast = fast.next;
    
        while(fast.next != null)
        {
            fast = fast.next;
            slow = slow.next;
        }
        
        slow.next = slow.next.next;
        
        return start.next;
    }
}
