class Solution {
    Integer nsl[];
    Integer nsr[];
    public int largestRectangleArea(int[] heights) {
        int result=0;
        int n=heights.length;
        nsl=new Integer[n];
        nsr=new Integer[n];
        nearestSmallerIndexOnLeft(heights);
        nearestSmallerIndexOnRight(heights);
        int width[]=new int[n];
        for(int i=0; i<n; i++){
            width[i]=nsr[i]-nsl[i]-1;
        }
        int area[]=new int[n];
        for(int i=0; i<n; i++){
            area[i]=width[i]*heights[i];
            result=Math.max(result,area[i]);
        }
        return result;
    }
    public void nearestSmallerIndexOnLeft(int arr[]){
        Stack<Integer> stack=new Stack<>();
        for(int i=0; i<arr.length; i++){
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if(stack.isEmpty()){
                nsl[i]=-1;
            }
            else{
                nsl[i]=stack.peek();
            }
            stack.push(i);
        }
    }
    public void nearestSmallerIndexOnRight(int arr[]){
        Stack<Integer> stack=new Stack<>();
        for(int i=arr.length-1; i>=0; i--){
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if(stack.isEmpty()){
                nsr[i]=arr.length;
            }
            else{
                nsr[i]=stack.peek();
            }
            stack.push(i);
        }
    }
}
