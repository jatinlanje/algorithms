InfixEvaluation:

1.Create an empty stack for operators and an empty stack for operands.
2.Iterate through each character in the infix expression.
3.If the character is an operand, push it onto the operand stack.
4.If the character is an operator, pop two operands from the operand stack, perform the operation, and push the result back onto the operand stack.
5.Repeat steps 2-4 for each character in the infix expression.
6.The final result will be the only remaining value on the operand stack.
7.In the case of any operator, check the precedence of the operator.
8.Perform the operation of the operator with respect to its precedence.
9.In case of any Parenthesis, keep a track of them and pop the operator from stack once a closed Parenthesis is encountered.
10.At last, pop all the remaining operator from the operator stack and perform the operation with the operands in the operand stack.
11.Return the final value in the operand stack.
12.It is important to note that the code should handle the case of division by zero, as well as any other errors that may occur during the evaluation of the infix expression.
