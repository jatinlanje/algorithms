class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();
        preOrder(root,result);
        return result;
    }
    public void preOrder(TreeNode root, ArrayList<Integer> result){
        //terminating condition
        if(root==null){
            return;
        }
        // add the current node's value to the result list
        result.add(root.val);
        // recursively call preOrder on the left subtree
        preOrder(root.left,result);
        // recursively call preOrder on the right subtree
        preOrder(root.right,result);
    }
}

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        Stack<TreeNode> stack = new Stack<>();
        // start with the root node
        stack.push(root);
        // continue until the stack is empty
        while(!stack.isEmpty()){
            // remove the top element from the stack
            TreeNode temp=stack.pop();
            // add the value of the current node to the result list
            result.add(temp.val);
            // if the current node has a right child, add it to the stack
            if(temp.right!=null){
                stack.push(temp.right);
            }
            // if the current node has a left child, add it to the stack
            if(temp.left!=null){
                stack.push(temp.left);
            }
        }
        return result;
    }
}
